import { ISimpleOracleState, ISimpleOracle, WeightsHash, ITrainingData } from "./interfaces/index";
export interface SimpleOracleOptions {
    actionIds?: string[];
    context?: string[];
    features?: string[];
    learningRate?: number;
    regularizer?: number;
    actionIdFeatures?: boolean;
    actionFeatures?: boolean;
    contextActionIdInteractions?: boolean;
    contextActionFeatureInteractions?: boolean;
    useInversePropensityWeighting?: boolean;
    laplaceSmoothing?: number;
    targetLabel?: string;
    name?: string;
    oracleWeight?: number;
    weights?: WeightsHash;
}
export declare class SimpleOracle implements ISimpleOracle {
    actionIds?: string[];
    context?: string[];
    features?: string[];
    addIntercept: boolean;
    learningRate: number;
    regularizer: number;
    actionIdFeatures: boolean;
    actionFeatures: boolean;
    contextActionIdInteractions: boolean;
    contextActionFeatureInteractions: boolean;
    useInversePropensityWeighting: boolean;
    laplaceSmoothing: number;
    targetLabel: string;
    name: string;
    oracleWeight: number;
    weights: {
        [feature: string]: number;
    };
    constructor({ actionIds, context, features, learningRate, regularizer, actionIdFeatures, actionFeatures, contextActionIdInteractions, contextActionFeatureInteractions, useInversePropensityWeighting, laplaceSmoothing, targetLabel, name, oracleWeight, weights, }?: SimpleOracleOptions);
    getOracleState(): ISimpleOracleState;
    static fromOracleState(oracleState: ISimpleOracleState): SimpleOracle;
    toJSON(): string;
    static fromJSON(json: string): SimpleOracle;
    _sigmoid(z: number): number;
    _getModelInputsWeightsAndLogit(actionId: string, context?: {
        [feature: string]: number;
    }, features?: {
        [feature: string]: number;
    }): {
        inputs: {
            [feature: string]: number;
        };
        weights: {
            [feature: string]: number;
        };
        logit: number;
    };
    predict(actionId: string, context?: {
        [feature: string]: number;
    }, features?: {
        [feature: string]: number;
    }): number;
    fit(trainingData: ITrainingData | ITrainingData[]): void;
}
