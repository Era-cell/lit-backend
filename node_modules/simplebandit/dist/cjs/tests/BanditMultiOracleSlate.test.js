"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const SimpleOracle_1 = require("../SimpleOracle");
const SimpleBandit_1 = require("../SimpleBandit");
describe("Multiple Oracles Recomendation", () => {
    let bandit;
    let oracles;
    const actionIds = ["apple", "pear", "chocolate"];
    const actions = [
        {
            actionId: "apple",
            features: { fruit: 1 },
        },
        {
            actionId: "pear",
            features: { fruit: 1 },
        },
        {
            actionId: "chocolate",
            features: { fruit: 0 },
        },
    ];
    const temperature = 0.5;
    beforeEach(() => {
        oracles = [
            new SimpleOracle_1.SimpleOracle({
                actionIds: actionIds,
                context: ["morning"],
                features: ["fruit"],
                targetLabel: "click",
                learningRate: 1.0,
                oracleWeight: 0.5,
            }),
            new SimpleOracle_1.SimpleOracle({
                actionIds: actionIds,
                context: ["morning"],
                features: ["fruit"],
                targetLabel: "rating",
                learningRate: 1.0,
                oracleWeight: 0.5,
            }),
        ];
        bandit = new SimpleBandit_1.SimpleBandit({
            oracle: oracles,
            actions: actions,
            temperature: temperature,
            slateSize: 2,
        });
    });
    describe("constructor", () => {
        it("should create an instance of SimpleBandit with the correct properties", () => {
            expect(bandit.oracle).toEqual(oracles);
            expect(bandit.temperature).toEqual(temperature);
            expect(bandit.slateSize).toEqual(2);
        });
    });
    describe("slate", () => {
        it("should return a slate of the correct size", () => {
            const slate = bandit.slate({ morning: 1 });
            expect(slate.slateItems.length).toEqual(2);
        });
    });
    describe("oracle should update upon responding to a slate", () => {
        it("choose should update weights for click oracle", () => __awaiter(void 0, void 0, void 0, function* () {
            const oldClickWeights = Object.assign({}, bandit.oracle[0].weights);
            const oldRatingWeights = Object.assign({}, oracles[1].weights);
            const slate = bandit.slate({ morning: 1 });
            const selectedActionId = slate.slateItems[0].actionId;
            yield bandit.choose(slate, selectedActionId);
            expect(oracles[0].weights).not.toEqual(oldClickWeights);
            expect(oracles[1].weights).toEqual(oldRatingWeights);
        }));
        it("reject should update weights for click oracle", () => __awaiter(void 0, void 0, void 0, function* () {
            const oldClickWeights = Object.assign({}, bandit.oracle[0].weights);
            const oldRatingWeights = Object.assign({}, oracles[1].weights);
            const slate = bandit.slate({ morning: 1 });
            yield bandit.reject(slate);
            expect(oracles[0].weights).not.toEqual(oldClickWeights);
            expect(oracles[1].weights).toEqual(oldRatingWeights);
        }));
        it("feedback should update weights for rating oracle", () => __awaiter(void 0, void 0, void 0, function* () {
            const oldClickWeights = Object.assign({}, bandit.oracle[0].weights);
            const oldRatingWeights = Object.assign({}, oracles[1].weights);
            const slate = bandit.slate({ morning: 1 });
            const selectedActionId = slate.slateItems[0].actionId;
            yield bandit.feedback(slate, "rating", 1, selectedActionId);
            expect(oracles[0].weights).toEqual(oldClickWeights);
            expect(oracles[1].weights).not.toEqual(oldRatingWeights);
        }));
    });
});
