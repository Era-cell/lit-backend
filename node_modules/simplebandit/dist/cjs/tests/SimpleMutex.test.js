"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const SimpleMutex_1 = require("../SimpleMutex");
describe("SimpleMutex", () => {
    let mutex;
    beforeEach(() => {
        mutex = new SimpleMutex_1.SimpleMutex();
    });
    it("should run a single operation successfully", () => __awaiter(void 0, void 0, void 0, function* () {
        const operation = jest.fn().mockResolvedValue("result");
        const result = yield mutex.run(operation);
        expect(operation).toHaveBeenCalled();
        expect(result).toBe("result");
    }));
    it("should run operations exclusively", () => __awaiter(void 0, void 0, void 0, function* () {
        let resource = 0;
        const increment = () => __awaiter(void 0, void 0, void 0, function* () {
            const current = resource;
            yield new Promise((resolve) => setTimeout(resolve, 50)); // simulate async work
            resource = current + 1;
        });
        const ops = [
            mutex.run(increment),
            mutex.run(increment),
            mutex.run(increment),
        ];
        yield Promise.all(ops);
        expect(resource).toBe(3);
    }));
    it("should run operations in order", () => __awaiter(void 0, void 0, void 0, function* () {
        let order = 0;
        const createOp = (id) => () => __awaiter(void 0, void 0, void 0, function* () {
            expect(order).toBe(id);
            order += 1;
        });
        const ops = [
            mutex.run(createOp(0)),
            mutex.run(createOp(1)),
            mutex.run(createOp(2)),
        ];
        yield Promise.all(ops);
    }));
    it("should handle errors without affecting subsequent operations", () => __awaiter(void 0, void 0, void 0, function* () {
        const failingOperation = jest.fn().mockRejectedValue(new Error("Failed"));
        const succeedingOperation = jest.fn().mockResolvedValue("Success");
        yield expect(mutex.run(failingOperation)).rejects.toThrow("Failed");
        const result = yield mutex.run(succeedingOperation);
        expect(succeedingOperation).toHaveBeenCalled();
        expect(result).toBe("Success");
    }));
    it("should release the lock correctly", () => __awaiter(void 0, void 0, void 0, function* () {
        const op1 = jest.fn().mockResolvedValue("First");
        const op2 = jest.fn().mockResolvedValue("Second");
        yield mutex.run(op1);
        const result = yield mutex.run(op2);
        expect(op1).toHaveBeenCalled();
        expect(result).toBe("Second");
    }));
    it("should correctly update the internal state of a a class when used inside a method", () => __awaiter(void 0, void 0, void 0, function* () {
        class Counter {
            constructor() {
                this.value = 0;
                this.mutex = new SimpleMutex_1.SimpleMutex();
            }
            increment() {
                return __awaiter(this, void 0, void 0, function* () {
                    yield this.mutex.run(() => {
                        this.value += 1;
                    });
                });
            }
            getValue() {
                return this.value;
            }
        }
        const counter = new Counter();
        yield counter.increment();
        expect(counter.getValue()).toBe(1);
        const ops = [counter.increment(), counter.increment(), counter.increment()];
        yield Promise.all(ops);
        expect(counter.getValue()).toBe(4);
    }));
});
