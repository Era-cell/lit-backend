"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleMutex = void 0;
class SimpleMutex {
    constructor() {
        this.queue = [];
        this.pending = false;
    }
    run(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const release = yield this._acquire();
            try {
                return yield Promise.resolve(callback());
            }
            finally {
                release();
            }
        });
    }
    _next() {
        if (this.queue.length > 0) {
            this.pending = true;
            const _next = this.queue.shift();
            if (_next) {
                _next();
            }
        }
        else {
            this.pending = false;
        }
    }
    _acquire() {
        const ticket = new Promise((resolve) => {
            this.queue.push(() => resolve(() => this._next()));
        });
        if (!this.pending) {
            this._next();
        }
        return ticket;
    }
}
exports.SimpleMutex = SimpleMutex;
